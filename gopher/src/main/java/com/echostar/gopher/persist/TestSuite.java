package com.echostar.gopher.persist;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * A test suite. A test suite is a collection of TestClass.
 * The combination of name and version must be unique.
 * @author charles.young
 *
 */
@Entity
@Table(name="test_suite")
public class TestSuite {

	private Long id;
	private String name;
	private String version;
	private String description;
	private boolean runmode;
    private List<Suite> suites = new ArrayList<Suite>();
    private List<TestClassDecorator> testClassDecorators = new ArrayList<TestClassDecorator>();
    private List<TestClass> testClasses = new ArrayList<TestClass>();

    /**
     * The default constructor.
     */
    public TestSuite () {}

    /**
     * A constructor that initializes all the members.
     * @param name			a name for the test suite
     * @param version		a unique version for this suite
     * @param description	a description of this suite
     * @param runmode		yes (run suite) or no (do not run suite)
     * @param testClasses	a collection of TestClass
     */
    public TestSuite (String name, String version, String description, boolean runmode,
    	List<TestClass> testClasses) {
    	this.name = name;
    	this.version = version;
    	this.description = description;
    	this.runmode = runmode;
    	this.testClasses = testClasses;
    }

    /**
     * The id generated by Hibernate.
     * @return	the id
     */
    @Id
    @GeneratedValue
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    /**
     * Get the suite name.
     * @return	the name
     */
    @Column(name = "name", unique=false, nullable = false)
    public String getName () {return name;}
    public void setName (String name) { this.name = name; }

    /**
     * Get the version.
     * @return	the version
     */
    @Column(name = "version", unique=false, nullable = false)
    public String getVersion () {return version;}
    public void setVersion (String version) { this.version = version; }

    /**
     * Get the description of this suite.
     * @return	the description
     */
    @Column(name = "description")
    public String getDescription () {return description;}
    public void setDescription (String description) { this.description = description; }
    
    /**
     * Get the runmode of this suite. If set to false, the suite will not run.
     * @return	the run mode
     */
    @Column(name = "runmode")
    public Boolean getRunmode () {return runmode;}
    public void setRunmode (Boolean runmode) { this.runmode = runmode; }

    /**
     * Get the {@link Suite Suites} having this TestSuite.
     * @return the suites
     */
    @ManyToMany(fetch = FetchType.EAGER, mappedBy="testSuites")
    public List<Suite> getSuites () {
    	return suites;
    }
    public void setSuites (List<Suite> suites) {
    	this.suites = suites;
    }

    /**
     * Get the set of TestClass for this TestSuite.
     * @return	the List of TestClass
     */
    @ManyToMany(fetch = FetchType.EAGER, cascade = {CascadeType.ALL})
    @JoinTable(name="test_suite_test_class",
    	joinColumns={@JoinColumn(name="test_suite_id")},
    	inverseJoinColumns={@JoinColumn(name="test_class_id")})
    public List<TestClass> getTestClasses () {
    	return testClasses;
    }
    public void setTestClasses (List<TestClass> testClasses) {
    	this.testClasses = testClasses;
    }

    /**
     * Get the set of {@link TestClassDecorator TestClassDecorator} for this TestSuite.
     * @return the suite runs
     */
    @OneToMany(fetch = FetchType.EAGER, mappedBy = "testSuite", cascade = {CascadeType.ALL})
    public List<TestClassDecorator> getTestClassDecorators () {
    	return testClassDecorators;
    }
    public void setTestClassDecorators (List<TestClassDecorator> testClassDecorators) {
    	this.testClassDecorators = testClassDecorators;
    }

    /**
     * Add a TestClass to the list.
     * Use Hibernate Session to update the store when done adding.
     * @param testClass	the TestClass to add
     */
    public void addTestClass (TestClass testClass) {
    	if (testClasses == null)
    		testClasses = new ArrayList<TestClass>();
    	testClasses.add(testClass);
    }

    /**
     * Add a Suite to the list.
     * Use Hibernate Session to update the store when done adding.
     * @param suite	the Suite to add
     */
    public void addSuite (Suite suite) {
    	if (suites == null)
    		suites = new ArrayList<Suite>();
    	suites.add(suite);
    }

    /**
     * Add a TestClassDecorator to the list.
     * Use Hibernate Session to update the store when done adding.
     * @param testClassDecorator	the TestClassDecorator to add
     */
    public void addTestClassDecorator (TestClassDecorator testClassDecorator) {
    	if (testClassDecorators == null)
    		testClassDecorators = new ArrayList<TestClassDecorator>();
    	testClassDecorators.add(testClassDecorator);
    }

    /**
	 * Override Object to show our id, and name.
	 * @return	the String
	 */
	public String toString() {
		return getClass().getSimpleName()+"("+id+", '"+name+"', '"+version+"')";
	}

	/**
	 * Compare each member and if not equal, return a reason.
	 * @param	o	an Object for comparison
	 * @return	a reason or null if equal
	 */
	public String getNotEqualsReason (Object o) {
		String notEqualsReason = null;
		
		if (!(o instanceof TestSuite)) {
			notEqualsReason = "Object is not a TestSuite";
			return notEqualsReason;
		}
		TestSuite s = (TestSuite) o;
		if (!id.equals(s.getId())) {
			notEqualsReason = "Ids not equal";
			return notEqualsReason;			
		}
		if (!name.equals(s.getName())) {
			notEqualsReason = "Names not equal";
			return notEqualsReason;			
		}
		if (!version.equals(s.getVersion())) {
			notEqualsReason = "Versions not equal";
			return notEqualsReason;			
		}
		if (!(runmode == s.getRunmode())) {
			notEqualsReason = "Runmodes not equal";
			return notEqualsReason;			
		}
		if (!description.equals(s.getDescription())) {
			notEqualsReason = "Descriptions not equal";
			return notEqualsReason;			
		}
		if (suites.size() != s.getSuites().size()) {
			notEqualsReason = "Suites size "+s.suites.size()+" not equal "+
				getSuites().size();
			return notEqualsReason;			
		}
		if (!suites.equals(s.getSuites())) {
			notEqualsReason = "Suites not equal";
			return notEqualsReason;			
		}
		if (testClassDecorators.size() != s.getTestClassDecorators().size()) {
			notEqualsReason = "TestClassRuns size not equal";
			return notEqualsReason;			
		}
		if (!testClassDecorators.equals(s.getTestClassDecorators())) {
			notEqualsReason = "TestClassRuns not equal";
			return notEqualsReason;			
		}
		if (testClasses.size() != s.getTestClasses().size()) {
			notEqualsReason = "TestClasses size not equal";
			return notEqualsReason;			
		}
		if (!testClasses.equals(s.getTestClasses())) {
			notEqualsReason = "TestClasses not equal";
			return notEqualsReason;			
		}
		return notEqualsReason;
	}
}
